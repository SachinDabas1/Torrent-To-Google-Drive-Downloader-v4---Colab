{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "tjyHK68V6utD",
        "outputId": "1288f9ec-7109-4bda-9add-422ea4b4cd0a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:root:Internal Python error in the inspect module.\n",
            "Below is the traceback from this internal error.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error mounting Google Drive: Error: credential propagation was unsuccessful\n",
            "Please ensure you authorized access correctly.\n",
            "Traceback (most recent call last):\n",
            "  File \"<ipython-input-1-f6585549b42f>\", line 37, in <cell line: 0>\n",
            "    drive.mount('/content/drive', force_remount=True)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\", line 100, in mount\n",
            "    return _mount(\n",
            "           ^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\", line 137, in _mount\n",
            "    _message.blocking_request(\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\", line 176, in blocking_request\n",
            "    return read_reply_from_input(request_id, timeout_sec)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\", line 103, in read_reply_from_input\n",
            "    raise MessageError(reply['error'])\n",
            "google.colab._message.MessageError: Error: credential propagation was unsuccessful\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n",
            "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
            "  File \"<ipython-input-1-f6585549b42f>\", line 52, in <cell line: 0>\n",
            "    sys.exit(1)\n",
            "SystemExit: 1\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 1101, in get_records\n",
            "    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 248, in wrapped\n",
            "    return f(*args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 281, in _fixed_getinnerframes\n",
            "    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n",
            "                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/lib/python3.11/inspect.py\", line 1739, in getinnerframes\n",
            "    traceback_info = getframeinfo(tb, context)\n",
            "                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/lib/python3.11/inspect.py\", line 1671, in getframeinfo\n",
            "    lineno = frame.f_lineno\n",
            "             ^^^^^^^^^^^^^^\n",
            "AttributeError: 'tuple' object has no attribute 'f_lineno'\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "object of type 'NoneType' has no len()",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-f6585549b42f>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0;31m# Attempt to mount Google Drive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m     \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Google Drive mounted successfully!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     99\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 100\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    101\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    136\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    138\u001b[0m         \u001b[0;34m'request_auth'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    175\u001b[0m   )\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    102\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mSystemExit\u001b[0m                                Traceback (most recent call last)",
            "    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n",
            "\u001b[0;32m<ipython-input-1-f6585549b42f>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32mimport\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mSystemExit\u001b[0m: 1",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[1;32m   2090\u001b[0m                     stb = ['An exception has occurred, use %tb to see '\n\u001b[1;32m   2091\u001b[0m                            'the full traceback.\\n']\n\u001b[0;32m-> 2092\u001b[0;31m                     stb.extend(self.InteractiveTB.get_exception_only(etype,\n\u001b[0m\u001b[1;32m   2093\u001b[0m                                                                      value))\n\u001b[1;32m   2094\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mget_exception_only\u001b[0;34m(self, etype, value)\u001b[0m\n\u001b[1;32m    752\u001b[0m         \u001b[0mvalue\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mexception\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    753\u001b[0m         \"\"\"\n\u001b[0;32m--> 754\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mListTB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstructured_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    755\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mshow_exception_only\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, context)\u001b[0m\n\u001b[1;32m    627\u001b[0m             \u001b[0mchained_exceptions_tb_offset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m             out_list = (\n\u001b[0;32m--> 629\u001b[0;31m                 self.structured_traceback(\n\u001b[0m\u001b[1;32m    630\u001b[0m                     \u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0metb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchained_exc_ids\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    631\u001b[0m                     chained_exceptions_tb_offset, context)\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1365\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1366\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1367\u001b[0;31m         return FormattedTB.structured_traceback(\n\u001b[0m\u001b[1;32m   1368\u001b[0m             self, etype, value, tb, tb_offset, number_of_lines_of_context)\n\u001b[1;32m   1369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1265\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose_modes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1266\u001b[0m             \u001b[0;31m# Verbose modes need a full traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1267\u001b[0;31m             return VerboseTB.structured_traceback(\n\u001b[0m\u001b[1;32m   1268\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumber_of_lines_of_context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1269\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1122\u001b[0m         \u001b[0;34m\"\"\"Return a nice text document describing the traceback.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1124\u001b[0;31m         formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n\u001b[0m\u001b[1;32m   1125\u001b[0m                                                                tb_offset)\n\u001b[1;32m   1126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mformat_exception_as_a_whole\u001b[0;34m(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)\u001b[0m\n\u001b[1;32m   1080\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1081\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1082\u001b[0;31m         \u001b[0mlast_unique\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion_repeat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_recursion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig_etype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1084\u001b[0m         \u001b[0mframes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_records\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlast_unique\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion_repeat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mfind_recursion\u001b[0;34m(etype, value, records)\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;31m# first frame (from in to out) that looks different.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_recursion_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 382\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m     \u001b[0;31m# Select filename, lineno, func_name to track frames with\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: object of type 'NoneType' has no len()"
          ]
        }
      ],
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Torrent Downloader to Google Drive using Google Colab (aria2c Method).\n",
        "\n",
        "Instructions:\n",
        "1. Run the first cell (\"Mount Google Drive\") and authorize access.\n",
        "2. Run the second cell (\"Install aria2c\").\n",
        "3. In the third cell (\"Download Torrent with aria2c\"):\n",
        "    - Replace 'YOUR_MAGNET_LINK_HERE' with your torrent magnet link.\n",
        "    - Or, uncomment the section for using a .torrent file and provide the path\n",
        "      (you'll need to upload the .torrent file to Colab or Drive first).\n",
        "    - Modify `drive_save_folder` if you want to save files to a different folder\n",
        "      in your Drive.\n",
        "4. Run the third cell to start the download.\n",
        "5. The cell will now print a cleaner download progress summary from aria2c\n",
        "   (Speed, ETA, Size) in real-time. Wait for it to complete.\n",
        "6. Check the specified 'save_path' in your Google Drive for the downloaded files.\n",
        "\n",
        "Important Notes:\n",
        "- Only download content you have the legal right to access.\n",
        "- Downloading large files consumes Colab resources and Google Drive storage.\n",
        "- Ensure you have enough space in your Google Drive.\n",
        "- Google may monitor Drive usage; misuse can lead to account restrictions.\n",
        "- This method stops seeding immediately after download (--seed-time=0)\n",
        "  to conserve resources.\n",
        "\"\"\"\n",
        "\n",
        "# @title 1. Mount Google Drive\n",
        "# Mounts your Google Drive to the Colab environment.\n",
        "# You'll be prompted to authorize Colab to access your Drive.\n",
        "from google.colab import drive\n",
        "import os\n",
        "import sys # Import sys for sys.exit\n",
        "\n",
        "try:\n",
        "    # Attempt to mount Google Drive\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    print(\"Google Drive mounted successfully!\")\n",
        "    # Define base path after successful mount\n",
        "    drive_base_path = '/content/drive/MyDrive'\n",
        "    if not os.path.exists(drive_base_path):\n",
        "         print(f\"Error: Google Drive base path '{drive_base_path}' not found after mount attempt.\")\n",
        "         print(\"Please ensure the mount was successful and the path is correct.\")\n",
        "         # Optional: Stop execution if base path is critical and not found\n",
        "         # sys.exit(1)\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error mounting Google Drive: {e}\")\n",
        "    print(\"Please ensure you authorized access correctly.\")\n",
        "    # Stop execution if Drive mount fails critically\n",
        "    import sys\n",
        "    sys.exit(1)\n",
        "\n",
        "# @title 2. Install aria2c\n",
        "# Installs the aria2 command-line download utility using apt.\n",
        "import subprocess\n",
        "\n",
        "print(\"Updating apt package list...\")\n",
        "# Update the package list quietly\n",
        "update_process = subprocess.run(['apt-get', 'update', '-qq'], capture_output=True, text=True)\n",
        "if update_process.returncode != 0:\n",
        "    print(f\"Warning: apt update failed with code {update_process.returncode}\")\n",
        "    print(\"Stderr:\", update_process.stderr)\n",
        "    # Proceeding with install anyway, but it might fail if lists are stale\n",
        "\n",
        "print(\"Installing aria2...\")\n",
        "# Install aria2 quietly, automatically confirm\n",
        "install_process = subprocess.run(['apt-get', 'install', '-y', '-qq', 'aria2'], capture_output=True, text=True)\n",
        "\n",
        "# Check if installation command was successful\n",
        "if install_process.returncode == 0:\n",
        "    print(\"aria2 installed successfully.\")\n",
        "    # Verify by checking the version\n",
        "    version_process = subprocess.run(['aria2c', '--version'], capture_output=True, text=True)\n",
        "    if version_process.returncode == 0:\n",
        "        print(version_process.stdout.splitlines()[0]) # Print first line of version info\n",
        "    else:\n",
        "        print(\"Could not verify aria2 installation.\")\n",
        "else:\n",
        "    print(f\"aria2 installation failed with error code {install_process.returncode}.\")\n",
        "    print(\"Apt Stderr:\")\n",
        "    print(install_process.stderr)\n",
        "    print(\"Apt Stdout:\")\n",
        "    print(install_process.stdout)\n",
        "    print(\"Cannot proceed without aria2. Please check the errors.\")\n",
        "    # Stop execution if install fails\n",
        "    sys.exit(1)\n",
        "\n",
        "\n",
        "# @title 3. Download Torrent with aria2c (Cleaner Real-time Output)\n",
        "\n",
        "import subprocess\n",
        "import os\n",
        "import sys # Make sure sys is imported here too\n",
        "\n",
        "# --- Configuration ---\n",
        "# !!! IMPORTANT: Replace with your magnet link OR provide a .torrent file path !!!\n",
        "source_input = \"PASTE YOUR MAGNET LINK HERE\" # Can be magnet link or path to .torrent file\n",
        "\n",
        "# Example for using a .torrent file (upload it first):\n",
        "# source_input = '/content/your_file.torrent'\n",
        "\n",
        "# Specify the directory in Google Drive where files should be saved\n",
        "# Default: Saves to a 'Torrents_aria2' folder in your main Drive directory.\n",
        "#          Creates the folder if it doesn't exist.\n",
        "drive_save_folder = 'Torrents_aria2' # <--- Change this folder name if desired\n",
        "\n",
        "# Construct the full path using the variable defined in Cell 1\n",
        "# Ensure drive_base_path was defined and exists from Cell 1\n",
        "if 'drive_base_path' not in globals() or not os.path.exists(drive_base_path):\n",
        "     print(f\"Error: Google Drive base path '{drive_base_path}' not found.\")\n",
        "     print(\"Please ensure Cell 1 (Mount Google Drive) ran successfully.\")\n",
        "     sys.exit(1) # Exit if base Drive path is missing\n",
        "\n",
        "save_path = os.path.join(drive_base_path, drive_save_folder)\n",
        "\n",
        "# Create the save directory if it doesn't exist\n",
        "if not os.path.exists(save_path):\n",
        "    try:\n",
        "        os.makedirs(save_path, exist_ok=True) # Use exist_ok=True for safety\n",
        "        print(f\"Created save directory: {save_path}\")\n",
        "    except OSError as e:\n",
        "        print(f\"Error creating directory {save_path}: {e}\")\n",
        "        # Exit if directory creation fails, as download won't work\n",
        "        sys.exit(1)\n",
        "else:\n",
        "    print(f\"Using existing save directory: {save_path}\")\n",
        "# --- End Configuration ---\n",
        "\n",
        "# Check if a valid source was provided\n",
        "if not source_input or source_input == \"YOUR_MAGNET_LINK_HERE\":\n",
        "     print(\"Error: No magnet link or .torrent file path provided.\")\n",
        "     print(\"Please edit the 'source_input' variable in this cell.\")\n",
        "     sys.exit(1)\n",
        "\n",
        "# Check if it's a file path and if the file exists\n",
        "is_file = False\n",
        "if not source_input.startswith(\"magnet:?\"):\n",
        "    if os.path.exists(source_input):\n",
        "        print(f\"Using torrent file: {source_input}\")\n",
        "        is_file = True\n",
        "    else:\n",
        "        print(f\"Error: Torrent file path specified but not found: {source_input}\")\n",
        "        print(\"Please ensure the path is correct and the file exists in Colab/Drive.\")\n",
        "        sys.exit(1)\n",
        "else:\n",
        "     print(f\"Using magnet link.\")\n",
        "\n",
        "\n",
        "print(\"\\nStarting download with aria2c...\")\n",
        "print(f\"Saving to: {save_path}\")\n",
        "\n",
        "# Construct the aria2c command\n",
        "# Changed --console-log-level to 'warn' to reduce verbosity\n",
        "aria2c_command = [\n",
        "    'aria2c',\n",
        "    '--console-log-level=warn', # CHANGED: Reduce log level to hide info messages\n",
        "    '--summary-interval=5',     # Keep summary updates every 5 seconds\n",
        "    '-d', save_path,\n",
        "    '--seed-time=0',\n",
        "    '--bt-stop-timeout=60',\n",
        "    '--max-connection-per-server=10',\n",
        "    '--min-split-size=1M',\n",
        "    '--split=10',\n",
        "    '--max-overall-upload-limit=50K',\n",
        "    '--allow-overwrite=true',\n",
        "    source_input # The magnet link or torrent file path\n",
        "]\n",
        "\n",
        "print(\"\\nExecuting command:\")\n",
        "print(' '.join(aria2c_command)) # Print the command being run\n",
        "print(\"-\" * 30)\n",
        "\n",
        "process = None # Initialize process variable\n",
        "try:\n",
        "    # Use Popen to run the command and capture output in real-time\n",
        "    process = subprocess.Popen(\n",
        "        aria2c_command,\n",
        "        stdout=subprocess.PIPE,       # Capture standard output\n",
        "        stderr=subprocess.STDOUT,     # Redirect stderr to stdout\n",
        "        text=True,                    # Decode output as text\n",
        "        bufsize=1,                    # Line-buffered\n",
        "        universal_newlines=True       # Handle different newline chars\n",
        "    )\n",
        "\n",
        "    # Read and print output line by line as it comes\n",
        "    for line in process.stdout:\n",
        "        # Simple check: Only print lines containing typical summary keywords or errors/warnings\n",
        "        # This aims to filter out potential leftover info messages if 'warn' level isn't enough\n",
        "        if any(keyword in line for keyword in ['[#', 'ETA:', 'Download complete', '[WARN]', '[ERROR]']):\n",
        "             print(line, end='') # Print the relevant line immediately\n",
        "             sys.stdout.flush() # Explicitly flush output buffer\n",
        "\n",
        "    # Wait for the process to complete and get the return code\n",
        "    process.wait()\n",
        "    return_code = process.returncode\n",
        "\n",
        "    print(\"-\" * 30) # Separator after output finishes\n",
        "    if return_code == 0:\n",
        "        print(\"\\n✅ aria2c finished successfully.\")\n",
        "        print(f\"Files should be available in: {save_path}\")\n",
        "    else:\n",
        "        # Common aria2c exit codes: https://aria2.github.io/manual/en/html/aria2c.html#exit-status\n",
        "        print(f\"\\n⚠️ aria2c exited with error code: {return_code}\")\n",
        "        print(\"Please check the aria2c output above for specific errors.\")\n",
        "        if return_code == 3:\n",
        "             print(\"Hint: Error code 3 often means a resource could not be found (e.g., bad magnet link, file not found).\")\n",
        "        elif return_code == 9:\n",
        "             print(\"Hint: Error code 9 often means issues connecting to peers/trackers.\")\n",
        "        elif return_code == 14:\n",
        "             print(\"Hint: Error code 14 can relate to network timeouts.\")\n",
        "        # Add more specific hints if needed\n",
        "\n",
        "except FileNotFoundError:\n",
        "     print(\"Error: 'aria2c' command not found.\")\n",
        "     print(\"Please ensure Cell 2 (Install aria2c) ran successfully.\")\n",
        "     sys.exit(1)\n",
        "except KeyboardInterrupt:\n",
        "    print(\"\\nDownload interrupted by user (Ctrl+C).\")\n",
        "    print(\"aria2c attempting graceful stop...\")\n",
        "    if process:\n",
        "        process.terminate() # Send SIGTERM\n",
        "        try:\n",
        "            process.wait(timeout=10) # Wait a bit for graceful exit\n",
        "        except subprocess.TimeoutExpired:\n",
        "            print(\"Process did not terminate gracefully, killing.\")\n",
        "            process.kill() # Force kill if necessary\n",
        "            process.wait()\n",
        "    print(\"Download stopped.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\nAn unexpected error occurred while running aria2c: {e}\")\n",
        "    # Ensure process is cleaned up if it was started\n",
        "    if process and process.poll() is None: # Check if process is still running\n",
        "        process.kill()\n",
        "        process.wait()\n",
        "\n",
        "print(\"\\nProcess finished.\")\n"
      ]
    }
  ]
}